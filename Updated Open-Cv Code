import cv2
import mediapipe as mp

# Initialize the video capture object
cap = cv2.VideoCapture(0)

# Initialize the MediaPipe Hands module
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False,
                       max_num_hands=2,
                       min_detection_confidence=0.5,
                       min_tracking_confidence=0.5)

# Initialize the drawing utility
mp_drawing = mp.solutions.drawing_utils

def detect_gesture(hand_landmarks):
    # Extract landmark positions for thumb and fingers
    thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
    index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
    middle_tip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP]
    ring_tip = hand_landmarks.landmark[mp_hands.HandLandmark.RING_FINGER_TIP]
    pinky_tip = hand_landmarks.landmark[mp_hands.HandLandmark.PINKY_TIP]

    # Gesture detection logic
    if (thumb_tip.y < index_tip.y and 
        middle_tip.y > index_tip.y and 
        ring_tip.y > index_tip.y and 
        pinky_tip.y > index_tip.y):
        return "I am fine"  # Only thumb detected

    elif (index_tip.y < thumb_tip.y and 
          middle_tip.y < thumb_tip.y and 
          ring_tip.y < thumb_tip.y and 
          pinky_tip.y < thumb_tip.y):
        return "Hello"  # Palm shown with all fingers open

    elif (index_tip.y < thumb_tip.y and 
          middle_tip.y < thumb_tip.y and 
          ring_tip.y > thumb_tip.y and 
          pinky_tip.y > thumb_tip.y):
        return "I will be there for dinner in two minutes"  # Two fingers shown

    elif (index_tip.y > thumb_tip.y and 
          middle_tip.y > thumb_tip.y and 
          ring_tip.y > thumb_tip.y and 
          pinky_tip.y > thumb_tip.y):
        return "Wait for me"  # Fist closed

    return None  # No gesture detected

while True:
    # Read a frame from the video capture
    success, image = cap.read()
    
    if not success:
        break
    
    # Convert the image to RGB format
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Process the image with the Hands module
    results = hands.process(image)
    
    # Convert the image back to BGR format
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    
    # Initialize variable to hold detected gesture text
    gesture_text = None

    # Draw the hand landmarks on the image and detect gestures
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            
            # Detect gesture based on landmarks
            gesture_text = detect_gesture(hand_landmarks)

    # Create a white strap for text display at the bottom
    if gesture_text:
        strap_height = 50  # Height of the strap
        # Draw the white strap at the bottom of the image
        cv2.rectangle(image, (0, image.shape[0] - strap_height), (image.shape[1], image.shape[0]), (255, 255, 255), -1)  # White strap
        
        # Get the size of the text to center it
        text_size = cv2.getTextSize(gesture_text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)[0]
        text_x = (image.shape[1] - text_size[0]) // 2  # Centering horizontally
        text_y = image.shape[0] - (strap_height // 4)  # Positioning vertically within the strap

        # Put black text on the white strap at calculated position
        cv2.putText(image, gesture_text, (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)  # Black text

    # Display the resulting image
    cv2.imshow('Hand Tracking', image)
    
    # Press 'q' to exit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close all windows
cap.release()
cv2.destroyAllWindows()
